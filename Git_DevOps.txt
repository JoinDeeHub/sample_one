Git 
Git is a Open source Distributed Version Control System and is used to track the changes in the source code.
scenario before Git:
-> Developers used to submit their codes to the central server without having copies of their own
-> Any changes made to the source code were unknown to the other developers
-> There was no communication between any of the developers

scenario after Git:
-> Every developer has an entire copy of the code on their local systems
-> Any changes made to the source code can be tracked by others
-> There is regular communication between the developers

Features of Git
1. Tracks history
2. Free and open source
3. Creates backups
4. Branching is easier
5. Distributed development

Difference between git and svn
Git
1. Git is a distributed version control system means whole repository will be there in the local workspace.
2. If i want to go previous versions of code , i can go in the local workspace itself.
3. Git has many features like rebase, fetch and stash etc.
SVN 
1. It is the centralized version control system. we have only the latest version of code in the local workspace.
2. If i want to go to previous versions of a code, then i need to checkout that previous  version from central repo.
3. It does not have any direct commands.

Git installation on UBUNTU
sudo apt-get update
sudo apt-get install -y git

Git installation on RHEL, centos, Fedora
sudo yum -y update
sudo yum install -y git

Git commands

1. Setting up username and email globally for all users on a specific machine.
git config --global user.name "abc"
git config --global user.email "abc@gmail.com"

2. create git repo directory
mkdir git_repo
To initialize git_repo 
cd git_repo
git init
ls -al - to make sure .git is present

Git workflow

1. Workspace : It is a directory where we modify the project related files. files present in workspace are called untracked files.
               "git add" command is used to move files from workspace to staging area.
2. Staging area/Index area : Here we save the changes. If we run "git commit" it will be committed to git repo.
                             The commit id will get created here. And the files present here are called as index files.
3. Local repo/ git repo : It is the location where versioning happens and files present here are called as committed files.

How do we commit files to the repo ? 
-> vi filename (Add come content ) and save it .
-> git add <filename>/git add -u /git add . : to move files from workspace to staging area.
-> git commit -m "commit msg" : To move files from staging to repo.
-> git status : To check whether files are in the workspace/staging area/git repo or  To make sure working dir is clean.

How to check history of this repo ?
-> git log : It shows history of the all files/whole repo.
-> git log <file _name> : It shows history of single file.
-> git log -2 : It shows latest 2 commits of any file.
-> git log -2 <filename> : 	It shows latest 2 commits of particular file.

Tags :

-> Tag is a name given to a set of versions of files and directories.
-> It indicates milestone of a project
-> we can easily remember tags.
-> We can not insert other version to a tag means we cannot edit tags. Tags are constant.
      syn : git tag <tagname> : Used to create a new tag.
-> git tag : Used to list tags.
-> git tag -d tagname : Used to delete tag.
-> git push origin --tag : Push the tag to remote repo.
-> git checkout tag : Used to switch to the different tag.

Branch :

-> Branch is used for parallel development.
-> If two people/two teams working on a same piece of code on two differnt branches., then later we can integrate by merging.
   syn : git branch : Used to list the branches and to see on which branch we are working.
-> git branch <branchname> : It is used to create new branch.
-> git checkout <branchname> : Used to switch to other branch
-> git checkout -B <branchname> : Used to switch to other branch by creating new branch.
-> git branch -d <branchname> : Used to delete the branch in local repo.
-> git push origin -d <brachname> : Used to delete the branch in remote repo.
-> git log --online : Used to check commit history in short form.

Note : Whenever branch is created the entire commit history of the parent branch will be copied to the new branch.
Note : Irrespective of on which branch a file is created or modified, git only check on which branch file is committed and that file belogs to the committed branch only.

Merge :
Merge is nothing but integrating two branches.
syn : git merge <branch_name>
Note : When you try to merge source branch to a destination branch you should be inside destination branch.

Merge conflicts:
Merge conflict occurs if the same line of code is modified on the same file on two differnt branches and when we try to 
merge those 2 branches, we will get merge conflicts.
Resolution:
If i don't know whose changes should i take in the merge, I contach developers who modified file on branch1 and branch2 then they will
decide and give new change. After that i will commit that to a file and continue with merge.

Rebase :
Rebase is also nothing but merge here one branch will get added to the tip of another branch
syn : git rebase <branch-name>

git commit --amend : It is used to edit the commit msg

Git clone : Clone is used to bring remote repository to the local workspace for the first time.
syn : git clone url
git push : git push is used to push the changes to the remote repository.
syn : git push origin branchname
git pull : Git pull is used to pull the changes from remote repo and merge it to the local repo automatically.
syn : git pull origin branchname
git fetch : Git fetch is used to bring the changes from remote repo and store it in a separate branch called FETCH_HEAD, so that 
            we can review the changes and merge if necessary.
syn : git fetch origin branchname


Git cherry-pick : 

It is used to merge specific commit to a branch and also used to pick a particular change in a branch.

syn : git cherry-pick <commit id>
To merge multiple commits 
syn : git cherry-pick <c1> <c2> <c3>....so on

There are 2 types of repository
1. Bare repository
2. Non bare repository

1. Bare repository : It acts as a central repository, here we can only push and pull the changesto the repository 
& we can't perform or do any git operations.

syn : git init --bare

2. Non bare repository : It acts as a local repo/git repo, here we can modify the files and push to a remote repo, and 
we can run all the git commands here.

syn : git init

Git revert and reset

Git revert :
It is used to undo the committed changes, here history will not be removed. we can track that reverted changes in the 
git log.
syn : git revert HEAD
      git revert <commitid>
	  
Git reset :
It is used to undo the committed changes, here history will be removed.
There are 3 types of resets.
1. Soft reset : It is used to move the files from git repo to the staging area.
syn : git reset --soft <commitid>/HEAD
2. Mixed reset : It is used to move files from staging area to workspace.
syn : git reset --mixed <commitid>/HEAD
3. Hard reset : It is used to reset the previous committed changesand there will be no clue that you have committed 
                the changes, hard reset will remove the files from git repo, staging area, & from workspace.
syn : git reset --hard <commitid>/HEAD

git clean -df : It is used to clean the unwanted files from workspace.
